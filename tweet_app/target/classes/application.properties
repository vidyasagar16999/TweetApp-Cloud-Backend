
#mongo db connections
#spring.data.mongodb.host=localhost
#spring.data.mongodb.database=tweetapp-mongodb
#spring.data.mongodb.port=27017

spring.data.mongodb.uri = mongodb+srv://sagar:sagar123@cluster0.fm6pidh.mongodb.net/tweetapp-mongodb?retryWrites=true&w=majority

#changing port number
server.port=5000

server.servlet.context-path=/api/v1.0/tweets

#Actuator
#management.server.port=8082
management.security.enabled = false
management.endpoints.web.exposure.include = *
management.endpoint.health.show-details=always
management.endpoints.web.base-path=/
management.endpoints.enabled-by-default=false
management.endpoint.health.enabled=true
#management.endpoints.web.exposure.include=prometheus
management.metrics.tags.application= MonitoringSpringDemoProject

#Kafka
#spring.kafka.consumer.bootstrap-servers=localhost:9092
#spring.kafka.consumer.group-id=mygroup
#spring.kafka.consumer.auto-offset-reset=earliest
#
#spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#
#spring.kafka.producer.bootstrap-servers=localhost:9092
#spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

#Logging System
logging.level.com.tweetapp=debug
logging.file.name=./tweetlogs.log

#docker build -t tweet_app_backend.jar .